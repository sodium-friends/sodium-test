const test = require('brittle')

const exp = [
  new Uint8Array([
    0xf8, 0xeb, 0xea, 0x48, 0x75, 0x04, 0x40, 0x66,
    0xfc, 0x16, 0x2a, 0x06, 0x04, 0xe1, 0x71, 0xfe,
    0xec, 0xfb, 0x3d, 0x20, 0x42, 0x52, 0x48, 0x56,
    0x3b, 0xcf, 0xd5, 0xa1, 0x55, 0xdc, 0xc4, 0x7b,
    0xbd, 0xa7, 0x0b, 0x86, 0xe5, 0xab, 0x9b, 0x55,
    0x00, 0x2b, 0xd1, 0x27, 0x4c, 0x02, 0xdb, 0x35,
    0x32, 0x1a, 0xcd, 0x7a, 0xf8, 0xb2, 0xe2, 0xd2,
    0x50, 0x15, 0xe1, 0x36, 0xb7, 0x67, 0x94, 0x58,
    0xe9, 0xf4, 0x32, 0x43, 0xbf, 0x71, 0x9d, 0x63,
    0x9b, 0xad, 0xb5, 0xfe, 0xac, 0x03, 0xf8, 0x0a,
    0x19, 0xa9, 0x6e, 0xf1, 0x0c, 0xb1, 0xd1, 0x53,
    0x33, 0xa8, 0x37, 0xb9, 0x09, 0x46, 0xba, 0x38,
    0x54, 0xee, 0x74, 0xda, 0x3f, 0x25, 0x85, 0xef,
    0xc7, 0xe1, 0xe1, 0x70, 0xe1, 0x7e, 0x15, 0xe5,
    0x63, 0xe7, 0x76, 0x01, 0xf4, 0xf8, 0x5c, 0xaf,
    0xa8, 0xe5, 0x87, 0x76, 0x14, 0xe1, 0x43, 0xe6,
    0x84, 0x20
  ]),
  new Uint8Array([
    0xf8, 0xeb, 0xea, 0x48, 0x75, 0x04, 0x40, 0x66,
    0xfc, 0x16, 0x2a, 0x06, 0x04, 0xe1, 0x71, 0xfe,
    0xec, 0xfb, 0x3d, 0x20, 0x42, 0x52, 0x48, 0x56,
    0x3b, 0xcf, 0xd5, 0xa1, 0x55, 0xdc, 0xc4, 0x7b,
    0xbd, 0xa7, 0x0b, 0x86, 0xe5, 0xab, 0x9b, 0x55,
    0x00, 0x2b, 0xd1, 0x27, 0x4c, 0x02, 0xdb, 0x35,
    0x32, 0x1a, 0xcd, 0x7a, 0xf8, 0xb2, 0xe2, 0xd2,
    0x50, 0x15, 0xe1, 0x36, 0xb7, 0x67, 0x94, 0x58,
    0xe9, 0xf4, 0x32, 0x43, 0xbf, 0x71, 0x9d, 0x63,
    0x9b, 0xad, 0xb5, 0xfe, 0xac, 0x03, 0xf8, 0x0a,
    0x19, 0xa9, 0x6e, 0xf1, 0x0c, 0xb1, 0xd1, 0x53,
    0x33, 0xa8, 0x37, 0xb9, 0x09, 0x46, 0xba, 0x38,
    0x54, 0xee, 0x74, 0xda, 0x3f, 0x25, 0x85, 0xef,
    0xc7, 0xe1, 0xe1, 0x70, 0xe1, 0x7e, 0x15, 0xe5,
    0x63, 0xe7, 0xe0, 0x96, 0xe0, 0x33, 0xd9, 0x1b,
    0x63, 0xf7, 0xac, 0x92, 0xe9, 0x97, 0x2e, 0x0d,
    0x43, 0xe5
  ]),
  new Uint8Array([
    0xf8, 0xeb, 0xea, 0x48, 0x75, 0x04, 0x40, 0x66,
    0xfc, 0x16, 0x2a, 0x06, 0x04, 0xe1, 0x71, 0xfe,
    0xec, 0xfb, 0x3d, 0x20, 0x42, 0x52, 0x48, 0x56,
    0x3b, 0xcf, 0xd5, 0xa1, 0x55, 0xdc, 0xc4, 0x7b,
    0xbd, 0xa7, 0x0b, 0x86, 0xe5, 0xab, 0x9b, 0x55,
    0x00, 0x2b, 0xd1, 0x27, 0x4c, 0x02, 0xdb, 0x35,
    0x32, 0x1a, 0xcd, 0x7a, 0xf8, 0xb2, 0xe2, 0xd2,
    0x50, 0x15, 0xe1, 0x36, 0xb7, 0x67, 0x94, 0x58,
    0xe9, 0xf4, 0x32, 0x43, 0xbf, 0x71, 0x9d, 0x63,
    0x9b, 0xad, 0xb5, 0xfe, 0xac, 0x03, 0xf8, 0x0a,
    0x19, 0xa9, 0x6e, 0xf1, 0x0c, 0xb1, 0xd1, 0x53,
    0x33, 0xa8, 0x37, 0xb9, 0x09, 0x46, 0xba, 0x38,
    0x54, 0xee, 0x74, 0xda, 0x3f, 0x25, 0x85, 0xef,
    0xc7, 0xe1, 0xe1, 0x70, 0xe1, 0x7e, 0x15, 0xe5,
    0x63, 0xe7, 0xe0, 0x96, 0xe0, 0x33, 0xd9, 0x1b,
    0x63, 0xf7, 0xac, 0x92, 0xe9, 0x97, 0x2e, 0x0d,
    0x43, 0xe5
  ])
]

module.exports = function (sodium) {
  test('crypto_aead_xchacha20poly1305_ietf', { skip: !sodium.crypto_aead_xchacha20poly1305_ietf_encrypt }, t => {
    const MLEN = 114
    const CLEN = (MLEN + sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES)
    const firstkey = new Uint8Array([
      0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
      0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
      0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
      0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f
    ])

    const MESSAGE = "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."

    const m = new Uint8Array(MLEN)
    const nonce = new Uint8Array([
      0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
      0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53
    ])

    const ad = new Uint8Array([0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7])
    const c = new Uint8Array(CLEN)
    const key2 = new Uint8Array(sodium.crypto_aead_xchacha20poly1305_ietf_KEYBYTES)
    const m2 = new Uint8Array(MLEN)
    let foundclen
    let m2len
    let i

    t.ok(MESSAGE.length === MLEN)
    m.set([
      0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65,
      0x6e, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
      0x65, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39,
      0x39, 0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64,
      0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x6e,
      0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f,
      0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c,
      0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
      0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69, 0x74, 0x2e
    ])

    foundclen = sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(c, m, ad, null, nonce, firstkey)

    t.ok(foundclen === MLEN + sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES, 'found_clen should be properly set')
    t.alike(c, exp[0])

    // found_maclen = sodium.crypto_aead_xchacha20poly1305_ietf_encrypt_detached(detached_c, mac, m, ad, null, nonce, firstkey);
    // t.ok(found_maclen === sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES, "found_maclen should be properly set")
    // t.alike(detached_c, c.subarray(0, MLEN), "detached ciphertext is good\n")

    t.exception.all(() => sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(Buffer.alloc(0), null, c, ad, nonce, firstkey),
      'null message throws')

    t.exception.all(() => sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(Buffer.alloc(0), null, c, ad, nonce, firstkey),
      'short message throws')

    t.execution(() => (m2len = sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(m2, null, c, ad, nonce, firstkey)),
      'sodium.crypto_aead_xchacha20poly1305_ietf_decrypt() should pass')

    t.is(m2len, MLEN, 'm2len is properly set')
    t.alike(m, m2, 'm === m2')

    // m2.fill(0)
    // t.execution(() => sodium.crypto_aead_xchacha20poly1305_ietf_decrypt_detached(m2, null, c.subarray(0, MLEN), mac, ad, nonce, firstkey),
    //   "sodium.crypto_aead_xchacha20poly1305_ietf_decrypt_detached() should pass")

    // t.alike(m, m2, "m === m2");

    for (i = 0; i < CLEN; i++) {
      c[i] ^= (i + 1)

      try {
        sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(m2, null, c, ad, nonce, firstkey)
        if (Buffer.compare(m, m2) !== 0) throw new Error()
        t.fail('message can be forged')
      } catch {
        c[i] ^= (i + 1)
      }
    }

    foundclen = sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(c, m, null, null, nonce, firstkey)
    t.is(foundclen, CLEN, 'found_clen is properly set (adlen = 0)')
    t.alike(c, exp[1])

    t.execution(() => (m2len = sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(m2, null, c, null, nonce, firstkey)),
      'sodium.crypto_aead_xchacha20poly1305_ietf_decrypt() should pass (adlen=0)\n')

    t.is(m2len, MLEN, 'm2len is properly set (adlen=0)')
    t.alike(m, m2, 'm === m2 (adlen=0)')

    m2len = 1
    t.exception.all(() => sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(
      m2.subarray(0, 1), null, Buffer.alloc(32),
      sodium.randombytes_uniform(sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES),
      null, nonce, firstkey),
    'sodium.crypto_aead_xchacha20poly1305_ietf_decrypt() throws with a short ciphertext')

    t.exception.all(() => sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(m2, null, c.subarray(0, 0), null, nonce, firstkey),
      'sodium.crypto_aead_xchacha20poly1305_ietf_decrypt() worked with an empty ciphertext')

    c.set(m)
    foundclen = sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(c, c.subarray(0, MLEN), null, null, nonce, firstkey)

    t.is(foundclen, CLEN, 'clen is properly set (adlen=0)')
    t.alike(c, exp[2])

    t.execution(() => (m2len = sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(c.subarray(0, MLEN), null, c, null, nonce, firstkey)),
      'sodium.crypto_aead_xchacha20poly1305_ietf_decrypt() should pass (adlen=0)')

    t.is(m2len, MLEN, 'm2len is properly set (adlen=0)')
    t.alike(m, c.subarray(0, MLEN), 'm === c (adlen=0)')

    sodium.crypto_aead_xchacha20poly1305_ietf_keygen(key2)
    t.exception.all(() => sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(c, null, c, null, nonce, key2),
      'sodium.crypto_aead_xchacha20poly1305_ietf_decrypt() with a wrong key should have failed')

    t.is(sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES, 16)
    t.is(sodium.crypto_aead_xchacha20poly1305_ietf_KEYBYTES, 32)
    t.is(sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES, 24)
    t.is(sodium.crypto_aead_xchacha20poly1305_ietf_NSECBYTES, 0)
    t.is(sodium.crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX, 4294967279)
  })
}
